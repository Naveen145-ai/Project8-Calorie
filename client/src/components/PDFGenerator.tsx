import { useState } from "react";
import { Button } from "@/components/ui/button";
import { FoodEntry } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";
import { Download, Loader2 } from "lucide-react";
import jsPDF from "jspdf";
import "jspdf/dist/polyfills.es.js";

interface PDFGeneratorProps {
  foodEntry: FoodEntry;
}

export default function PDFGenerator({ foodEntry }: PDFGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const generatePDF = async () => {
    try {
      setIsGenerating(true);
      
      // Create new PDF document
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(20);
      doc.setTextColor(76, 175, 80); // Primary color
      doc.text("NutriScan AI - Nutrition Report", 105, 20, { align: "center" });
      
      // Add food name
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text(`Food: ${foodEntry.name}`, 20, 40);
      
      // Add date
      const date = new Date(foodEntry.timestamp).toLocaleDateString();
      doc.setFontSize(12);
      doc.setTextColor(100, 100, 100);
      doc.text(`Date: ${date}`, 20, 50);
      
      // Add horizontal line
      doc.setDrawColor(200, 200, 200);
      doc.line(20, 55, 190, 55);
      
      // Main nutritional info
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text("Nutritional Information", 20, 65);
      
      doc.setFontSize(12);
      doc.text(`Calories: ${foodEntry.calories || 0} kcal`, 30, 75);
      doc.text(`Protein: ${foodEntry.protein || 0} g`, 30, 85);
      doc.text(`Carbohydrates: ${foodEntry.carbs || 0} g`, 30, 95);
      doc.text(`Fats: ${foodEntry.fats || 0} g`, 30, 105);
      
      // Micronutrients
      if (foodEntry.nutrients) {
        let yPos = 120;
        
        // Vitamins
        if (Object.keys(foodEntry.nutrients.vitamins || {}).length > 0) {
          doc.setFontSize(14);
          doc.text("Vitamins", 20, yPos);
          yPos += 10;
          
          doc.setFontSize(12);
          Object.entries(foodEntry.nutrients.vitamins || {}).forEach(([vitamin, value]) => {
            doc.text(`${vitamin}: ${value} mg`, 30, yPos);
            yPos += 8;
            
            // Add new page if needed
            if (yPos > 270) {
              doc.addPage();
              yPos = 20;
            }
          });
        }
        
        // Minerals
        if (Object.keys(foodEntry.nutrients.minerals || {}).length > 0) {
          doc.setFontSize(14);
          doc.text("Minerals", 20, yPos);
          yPos += 10;
          
          doc.setFontSize(12);
          Object.entries(foodEntry.nutrients.minerals || {}).forEach(([mineral, value]) => {
            doc.text(`${mineral}: ${value} mg`, 30, yPos);
            yPos += 8;
            
            // Add new page if needed
            if (yPos > 270) {
              doc.addPage();
              yPos = 20;
            }
          });
        }
        
        // Fiber and sugar
        if (foodEntry.nutrients.fiber || foodEntry.nutrients.sugar) {
          yPos += 5;
          if (foodEntry.nutrients.fiber) {
            doc.text(`Fiber: ${foodEntry.nutrients.fiber} g`, 30, yPos);
            yPos += 8;
          }
          
          if (foodEntry.nutrients.sugar) {
            doc.text(`Sugar: ${foodEntry.nutrients.sugar} g`, 30, yPos);
            yPos += 8;
          }
        }
      }
      
      // Footer
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(150, 150, 150);
        doc.text(`Generated by NutriScan AI - Page ${i} of ${pageCount}`, 105, 285, { align: "center" });
      }
      
      // Save the PDF
      doc.save(`NutriScan_${foodEntry.name.replace(/\s+/g, '_')}_${date}.pdf`);
      
      toast({
        title: "PDF Generated",
        description: "Your nutrition report has been downloaded",
      });
    } catch (error) {
      console.error("PDF generation error:", error);
      toast({
        title: "PDF Generation Failed",
        description: "There was an error generating your PDF report",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <Button
      variant="outline"
      className="w-full md:w-auto"
      onClick={generatePDF}
      disabled={isGenerating}
    >
      {isGenerating ? (
        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
      ) : (
        <Download className="mr-2 h-4 w-4" />
      )}
      Download PDF Report
    </Button>
  );
}
